# Environment settings file (.env)

# Purpose
#  This file is used to define environment-specific variables for the application.
#  Keeping configuration information out of code files enhances security and flexibility.
#  Default values can be provided in the code if this file cannot be read.

# How to Use
#  1. Install the external package 'dotenv' into your virtual environment.
#  2. Import the 'load_dotenv' function into your Python file.
#  3. Call the 'load_dotenv()' function at the start of your application.

# Python Example
#  from dotenv import load_dotenv
#  load_dotenv()

# Maintain two versions of this file
#   1. .env.example
#      A template containing all necessary 
#      environment variables WITHOUT sensitive information.
#      Commit this file to version control as record of variable names.
#   2. .env
#      A file containing actual environment-specific configurations, 
#      including sensitive data and secrets.
#      Do NOT commit this file to version control. 
#      Ensure there is an entry for .env in .gitignore to prevent
#      accidental exposure of sensitive information.

# UPPER_CASE with UNDERSCORES 
# - Follow naming convention for environment variables.
# - No spaces or special characters allowed.
# - Use descriptive, uppercase names to indicate purpose.
# - Add units to numeric variable names (e.g., INTERVAL_SECONDS).

# Environment Variables Defined Below

# ============================
# EITHER KAFKA & ZOOKEEPER ON 127.0.0.1
# ============================

# DEFAULT SETTINGS (Recommended for most users)
# Use these settings if:
# - You are running Kafka and Zookeeper on the same machine as your Python code.
# - You are on native Windows, macOS, or Linux (not using WSL).
# - You are using Docker or a standard local Kafka installation.
# - You do NOT have issues connecting to Kafka/Zookeeper.
#
# Uncomment and set if needed:
ZOOKEEPER_ADDRESS=127.0.0.1:2181
KAFKA_BROKER_ADDRESS=127.0.0.1:9092

# ============================
# OR KAFKA & ZOOKEEPER ON localhost
# ============================

# WSL Users (Windows Subsystem for Linux)
# Use these settings if:
# - You are running Kafka/Zookeeper inside WSL but executing Python in Windows.
# - Your Kafka services are inside a Linux VM (like WSL2).
# - You experience connection issues with 127.0.0.1.
#
# Uncomment and set if needed:
# ZOOKEEPER_ADDRESS=localhost:2181
# KAFKA_BROKER_ADDRESS=localhost:9092

# ============================
# ðŸ”§ KAFKA TOPIC SETTINGS
# ============================

# Kafka topic name (default: 'buzzline')
# BUZZ_TOPIC=buzzline


# ============================
# PROJECT SETTINGS
# ============================

# Pipeline application settings for Kafka
BUZZ_TOPIC=buzzline_db
MESSAGE_INTERVAL_SECONDS=5
BUZZ_CONSUMER_GROUP_ID=buzz_group_db

# Data Storage Configuration
BASE_DATA_DIR=data
LIVE_DATA_FILE_NAME=project_live.json
SQLITE_DB_FILE_NAME=buzz.sqlite

# Database Configuration
# Options: sqlite, postgres, mongodb
DATABASE_TYPE=sqlite

# PostgreSQL database connection details
# Used if DATABASE_TYPE is set to 'postgres'
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=postgres_buzz_database
POSTGRES_USER=your_username
POSTGRES_PASSWORD=your_password

# MongoDB connection details
# Used if DATABASE_TYPE is set to 'mongodb'
MONGODB_URI=mongodb://localhost:27017/
MONGODB_DB=mongo_buzz_database
MONGODB_COLLECTION=mongo_buzz_collection
